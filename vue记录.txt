vm
{
    _uid: number // 从0累加
    _Vue: true
    _renderProxy: vmInstance
    _self: vmInstance
    $options: mergeOptions的return值
    
    /* function initLifecycle 中初始化 start  */
    $parent
    $root:vmRootInstance
    $children: vmInstance[]
    $refs: {}
    _watcher:null
    _inactive:null
    _directInactive:false
    _isBeingDestroyed:false
    _isDestroyed:false
    /* function initLifecycle 中初始化 end  */
    
    /* function initEvents 中初始化 start  */
    _events: Object.create(null)
    _hasHookEvent: false
    /* function initEvents 中初始化 end  */
    
    /* function initRender 中初始化 start  */
    _vnode: null
    _staticTrees: null
    $slots: {}
    $scopedSlots: freeze({})
    _c: $createElement function
    $createElement: $createElement function
    $attrs: freeze({}) // Object.defineProperty 添加响应get、set
    $listeners: freeze({}) // Object.defineProperty 添加响应get、set
    /* function initRender 中初始化 end  */

    /* function initState 中初始化 start  */
    _watcher: watcher instance
    _watchers:[] // 所有watcher的集合（包含computed、watch）
        /* function initProps 中初始化 start  */
        _props:{} // 存储响应式的props对象
        $options._propKeys=[] //  prop的key集合
        /* function initProps 中初始化 end  */

        /* function initMethods 中初始化 start  */
        将method绑定vm，并作为属性赋值到vm上
        /* function initMethods 中初始化 end  */

        /* function initData 中初始化 start  */
        _data: vm.$options.data // observe data对象
        /* function initData 中初始化 end  */

        /* function initComputed 中初始化 start  */
        _computedWatchers: Object.create(null) // computed watcher instance映射对象
        /* function initComputed 中初始化 end  */

    /* function initState 中初始化 end  */

    /* function initProvide 中初始化 start  */
    _provided: vm.$options.provide;
    /* function initProvide 中初始化 end  */

    /* function mountComponent 中初始化 start  */
    $el: el
    /* function mountComponent 中初始化 end  */

    /* function Vue.prototype._render start */
    $vnode: $options._parentVnode // 子组件的父组件对应的vnode实例
    /* function Vue.prototype._render end */


    // 创建组件构造函数，继承自Vue的构造函数，即Sub.prototype=Object.create(Vue.prototype)
    Vue.extend
}

VNode
{
  tag: tag // `vue-component-${Ctor.cid}-${组件名称}`
  data: data // createElement的第二个参数
  children: children
  text: text
  elm: elm
  ns: undefined
  context: vm
  fnContext: undefined
  fnOptions: undefined
  fnScopeId: undefined
  key: data&& data.key;
  componentOptions: {propsData: 父组件传递的属性, listeners: createElement第二个参数对象on属性对应的配置对象, tag: undefined, children: undefined, Ctor: ƒ}
  componentInstance: undefined
  parent: undefined
  raw: false
  isStatic: false
  isRootInsert: true
  isComment: false
  isCloned: false
  isOnce: false
  asyncFactory: asyncFactory // undefined
  asyncMeta: undefined
  isAsyncPlaceholder: false
}

// hook调用顺序
beforeCreate
created
beforeMount

Observer instance
{
    value:原始对象
        __ob__:挂载在value上，指向当前这个Observer instance
    dep:Dep instance
    vmCount:0
}

// 数组类型的value，其__proto__会被赋值为arrayMethods(特殊封装的操作数组函数)
// 对象类型的value，遍历对象上的属性，对每个属性定义
function Observer (value) 

Dep instance
{
    id: number // 从0累加
    subs: []
}
Dep函数上的属性
{
    target:null // 存储watch instance
}

Watcher
{
    vm: vm
    deep: false
    user: false
    lazy: true
    sync: false
    before: false
    cb: Function
    id: // 从0累加
    active: true
    dirty: this.lazy
    deps: []
    newDeps: []
    depIds: new Set()
    newDepIds: new Set()
    expression: watch的getter函数toString
    getter: Function
    value = this.lazy ? undefined : this.getter.call(vm, vm);
}

vm上的watch使用for...in循环出来的,顺序无法保证，顺序由各浏览器的实现决定
```
function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}
```

主进程中watch中的handler被放入一个任务队列中，该任务队列的调用方式：在Promise.resolve().then(()=>{遍历任务队列中的所有任务并执行})

constructer.options
{
    compoents:component[]
    directives:directive[]
    filters:{}
}


// 将props转为对象；属性名作为key，也转为小驼峰形式
function normalizeProps 

// 处理inject
function normalizeInject

// 转化指令函数为{bind:def$$1,update:def$$1}
function normalizeDirectives 

// 将parent和child对象进行合并，parent部分属性会被child的属性覆盖，比如el；parent部分属性会挂载到child对应属性值对象的原型上（__proto__），比如components
function mergeOptions(parent,child) 

// 创建新对象，且新对象的__proto__指向parentValue对象，childValue对象上属性被复制到新对象上
function mergeAssets(parentValue,childValue) 

// 初始化vm实例上的属性
function initLifecycle

// 初始化vm实例上的事件属性
function initEvents

// 初始化渲染函数所要的数据
function initRender

// 调用hook
function callHook(vm,hook){// hook为hookName
    ...
    var handlers = vm.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {// 同步执行
        invokeWithErrorHandling(handlers[i], vm, null, vm, info);
      }
    }
    ...
    if (vm._hasHookEvent) {
        vm.$emit('hook:' + hook);
    }
    ...
}

// 获取父级provide提供的inject到当前组件的数据对象，仅向上查找到第一次找到位置，找到后不再向上查找
// 如果找到根组件都没找到，则使用inject中设置的default属性
function resolveInject

// 将inject的数据挂载到vm上
function initInjections

// 初始化props、methods、data、computed、watch
function initState

// observe流程，observe仅监听引用类型数据
observe(如果观察数据是普通对象且不是vnode实例) -> new Observer -> 遍历obj上所有的key，对每个key执行defineReactive$$1 -> observe(同上)

function defineComputed
    // computed 使用缓存
    var shouldCache = !isServerRendering();
    sharedPropertyDefinition.get = shouldCache
        ? createComputedGetter(key)
        : createGetterInvoker(userDef);

    // 如果this._computedWatchers[key]的watcher的dirty属性为true时，执行watcher.evaluate(), return watcher.value
    function createComputedGetter(key)

    // 每次get时直接调用computed上对应的函数
    function createGetterInvoker(getter)

// 对computed上的属性，在vm上设置对应的getter、setter
funciton initComputed

// 将watch添加到_watchers中
function initWatch

// 遍历所有层级的children，将其扁平化到一维数组
function normalizeArrayChildren

// 
function __patch__

// 更新html标签的属性
function updateAttrs


组件patchVnode更新流程-start

执行cbs.update，更新1个DOM节点
  // 更新html标签的属性
  function updateAttrs

  // 更新html标签的class
  function updateClass

  // 更新html节点的绑定事件
  function updateDOMListeners
  function updateListeners

  // 更新DOM对象上的属性
  function updateDOMProps

  // 更新DOM的style属性
  function updateStyle

  // 更新ref指向
  function update

  // 更新指令
  function updateDirectives

执行updateChildren
  patchVnode

组件更新流程-end


function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}